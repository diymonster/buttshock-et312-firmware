0x0000	L		HeaderTable
0x0000	L		IVT_RESET
0x0004	L		IVT_IRQ0
0x0008	L		IVT_IRQ1
0x000c	L		IVT_TIMER2_COMP
0x0010	L		IVT_TIMER2_OVF
0x0014	L		IVT_TIMER1_CAPT
0x0018	L		IVT_TIMER1_COMPA
0x001c	L		IVT_TIMER1_COMPB
0x0020	L		IVT_TIMER1_OVF
0x0024	L		IVT_TIMER0_OVF
0x0028	L		IVT_SPISTC
0x002c	L		IVT_USART_RXC
0x0030	L		IVT_USART_UDR
0x0034	L		IVT_USART_TXC
0x0038	L		IVT_ADC
0x003c	L		IVT_EERDY
0x0040	L		IVT_ANA_COMP
0x0044	L		IVT_TWI
0x0048	L		IVT_IRQ2
0x004c	L		IVT_TIMER0_COMP
0x0050	L		IVT_SPMRDY

0x14a6	L		RESET
0x0e66	L		IRQ0_Handler
0x0e7c	L		IRQ1_Handler
0x0e92	L		Timer1_CMP_A
0x0f8a	L		Timer1_CMP_B
0x0e5e	L		Timer0_Overflow
0x106e	L		ADC_Conversion_Complete
0x10f8	L		SPI_Transfer_Complete
0x1178	L		USART_RX_Complete

0x031c	L		set_routine_timer					Parameter r26:r27, returns r0, sets T flag
0x0352	L		CallTable_29_set_up_r4-14_with_a_and_b_values						Parameter r28:r29
0x0390	L		load_two_bytes_relative_to_Z		Parameter: r30:r31 (Z), returns r18, r0
0x03a8	L		sum_two_bytes_from_fla_unknown_0x1fec_plus_offset_at_z_minus_156_and_add_r18		Parameter r18, return value r18
0x059c	L		update_current_channel_multi_adjust_value
0x05fe	L		CallTable_18_select_new_mode					Parameter r28:r29
0x0604	L		Function_0x604
0x0790	L		run_call_table						Parameter r30 (0-39) CallTable_31
0x07bc	L		CallTable_1						noop
0x07be	L		CallTable_0_5
0x07e0	L		CallTable_2_Show_status
0x0820	L		CallTable_10_Show_main_menu
0x083e	L		CallTable_8_Display_next_menu_item
0x0852	L		CallTable_9_Display_prev_menu_item
0x0866	L		CallTable_16_Switch_to_next_mode
0x087c	L		CallTable_17_Switch_to_prev_mode
0x0892	L		CallTable_3_Select_Current_Menu_Item
0x094e	L		CallTable_15_Show_advanced_menu
0x0968	L		CallTable_11_Show_split_mode_settings
0x0988	L		CallTable_12_Activate_split_mode
0x099a	L		CallTable_6_Set_Power_Level
0x09a4	L		CallTable_7_Edit_Advanced_Parameter
0x09e6	L		CallTable_32
0x09fe	L		CallTable_33_start_ramp
0x0a1c	L		CallTable_4_Exit_Menu
0x0a40	L		Function_0xa40
0x0a66	L		CallTable_13_advanced_menu_prev_item
0x0a94	L		CallTable_14_advanced_menu_next_item
0x0ab8	L		CallTable_26						Parameter r26
0x0ac8	L		copy_mem_0x018c_to_mem_0x008c_length_52					CallTable_27
0x0ad8	L		copy_mem_0x008c_to_mem_0x018c_and_back_length_52		CallTable_25
0x0aee	L		display_lcd_parameters_as_char							CallTable_19
0x0afa	L		display_lcd_parameters_as_int							CallTable_20
0x0b06	L		display_lcd_parameters_as_string						CallTable_21
0x0b0e	L		set_lcd_parameters_as_position							CallTable_35
0x0b16	L		set_lcd_parameters_as_position_redundant				CallTable_36
0x0b1e	L		enable_ADC_and_set_r17[3]								CallTable_34
0x0b2a	L		prng_next												Result in r26 and X[18]
0x0b58	L		r26_is_random_between_mem0x8D_and_mem0x8E
0x0b94	L		endless_loop
0x0b96	L		rjmp_main
0x0b98	L		CallTable_22
0x0cee	L		CallTable_30
0x11c8	L		initialize_lcd						
0x11f8	L		set_lcd_position					Parameter r31
0x121c	L		output_char_to_lcd					Parameter r30
0x1240	L		wait_for_lcd
0x1278	L		display_char_r30_at_position_r31_on_display		Parameter r30, r31
0x1284	L		display_number_on_display_scaled			Parameter r31 (position), r30 (number from 0-255, will be displayed as 0-99)
0x12b8	L		display_number_on_display				Parameter r31 (position), r30 (number from 0-255, will be displayed as 0-255)
0x1380	L		multiply						Parameter r30:r31, r26: r30:r31 *= r26
0x1362	L		multiplyr30r31						Parameter r30:r31,returns r30:31 = r30 * r31
0x138c	L		divide							Parameter r31 r30: r30 /= r31, r31 = r30 % r31
0x13bc	L		divide_word						Parameter r26:r27 r30:r31: r30:r31 /= r26:r27, r26:r27 = r30:r31 % r26:r27
0x13fa	L		rotate_right						Parameter r30:r31 r26
0x1496	L		send_data_to_spdr
0x15a4	L		copy_flash_0x01f3_to_eeprom_0x8_length_12
0x154c	L		copy_flash_0x1f9c_0x1fa4_to_memory_0x80_0x0188_and_call_CallTable_29	CallTable_24
0x157a	L		copy_flash_0x1fdc_to_memory_0x1f0_and_copy_eeprom_0x08_to_0x1f3		CallTable_28

0x1676	L		error_handler						CallTable_23_37_38_39

0x0054	L		Main
0x05e6	L		sleep							Parameter r26
0x12dc	L		show_Text_on_Display2					Parameter r26
0x12ec	L		show_Text_on_Display					Parameter r26
0x1a2e	L		send_com_buffer_to_USART				
0x1590	L		copy_flash_0x1fdc_to_memory_0x01f0
0x183e	L		delay_0x183e						Parameter r26
0x19dc	L		read_from_eeprom					Parameter r26:r27, returns r0
0x19f2	L		write_to_eeprom						Parameter r26:r27 (address), r0 (value)
0x1a60	L		look_for_keypress						
0x1a76	L		reset_device
0x1a7c	L		Function_0x1a7c					Parameters r9,r8,r7
0x1af2	L		store_z_pointer_at_0x020e_and_move_r13_to_r2_and_set_r18_to_negative_r30
0x1b00	L		subtract_r31_from_r2_save_r18_at_memory_0x0210_and_r2_at_memory_0x0211
0x1a06	L		write_r26_to_com_buffer					Parameters r26

0x1990	L		serial_protocol_write_handshake_to_com_buffer					Puts 0x7 into com buffer until a 0x0 is received back
0x1924	L		serial_protocol_write_flash_to_com_buffer					Writes flash address at 0x1f00-0x1fff (chosen via r26) to com buffer
0x1968	L		serial_protocol_write_com_buffer_to_eeprom					Writes flash address at 0x1f00-0x1fff (chosen via r26) to com buffer
0x1974	L		serial_protocol_write_com_buffer_to_sram					Writes data (up to 8 bytes) from com buffer into sram
0x197e	L		serial_protocol_write_success_to_com_buffer					Writes a 0x6 (success code) to the com buffer
0x3e00	L		bootloader
0x3fa2	L		set_TCNT1_0xe17b_and_rest_TOV1_flag
0x3fb4	L		get_TOV1_flag

0x0060	M	B	1	COMM_MAIN_CBLOCK_BASE
0x0061	M	B	1	CBLOCK_MULTI_A_OFFSET				Multi Adjust Offset
0x0062	M	B	1	power_supply_voltage
0x0063	M	B	1	battery_voltage
0x0064	M	B	1	CBLOCK_POT_A_OFFSET				CurrentLevel A
0x0065	M	B	1	CBLOCK_POT_B_OFFSET				CurrentLevel B
0x0066	M	B	1	audio_input_level_a
0x0067	M	B	1	audio_input_level_b
0x0069	M	B	1	currently_pressed_button
0x006d	M	B	1	menu_state
0x0070	M	B	1	execute_command
0x0078	M	B	1	current_menu_selection
0x0079	M	B	1	lowest_selectable_mode
0x007a	M	B	1	highest_selectable_mode
0x007b	M	B	1	current_mode
0x0080	M	B	3	mem_unknown_0x80				Copied from 0x1f9c
0x0083	M	B	1	COMM_CONTROL_FLAG				Output Control Flags, Copied from 0x1f9c+3
0x0084	M	B	1	mem_unknown_0x84				Copied from 0x1f9c+4
0x0085	M	B	1	mem_unknown_0x85-$4085				Copied from 0x1f9c+5
0x0086	M	B	1	multi_adjust_range_high_end			Copied from 0x1f9c+6
0x0087	M	B	1	multi_adjust_range_low_end			Copied from 0x1f9c+7
0x0088	M	B	1	routine_timer_low
0x0089	M	B	1	routine_timer_mid
0x008a	M	B	1	routine_timer_high
0x008b	M	B	1	routine_timer2
0x008c	M	B	12	mem_unknown_0x8c
0x0098	M	B	1	channel_a_current_gate_on_time
0x0099	M	B	1	channel_a_current_gate_off_time
0x009a	M	B	1	channel_a_current_select
0x009b	M	B	1	mem_unknown_0x9b
0x009c	M	B	1	mode_switch_ramp_value_counter
0x009d	M	B	1	mem_unknown_0x9d	
0x009e	M	B	5	mem_unknown_0x9e
0x00a3	M	B	1	mode_switch_ramp_select
0x00a4	M	B	1	mem_unknown_0xa4-$40a4
0x00a5	M	B	1	channel_a_current_intensity_modulation_value
0x00a6	M	B	1	channel_a_current_intensity_modulation_min
0x00a7	M	B	1	channel_a_current_intensity_modulation_max
0x00a8	M	B	1	channel_a_current_intensity_modulation_rate
0x00ac	M	B	1	channel_a_current_intensity_modulation_select
0x00ae	M	B	1	channel_a_current_frequency_modulation_value
0x00af	M	B	1	channel_a_current_frequency_modulation_min
0x00b0	M	B	1	channel_a_current_frequency_modulation_max
0x00b1	M	B	1	channel_a_current_frequency_modulation_rate
0x00b5	M	B	1	channel_a_current_frequency_modulation_select
0x00b7	M	B	1	channel_a_current_width_modulation_value
0x00b8	M	B	1	channel_a_current_width_modulation_min
0x00b9	M	B	1	channel_a_current_width_modulation_max
0x00ba	M	B	1	channel_a_current_width_modulation_rate
0x00be	M	B	1	channel_a_current_width_modulation_select
0x00c0	M	B	1	space_for_user_routine_scratchpad_a
0x0180	M	B	1	write_lcd_parameter
0x0181	M	B	1	write_lcd_position
0x0185	M	B	1	need_to_show_select_mode_message
0x0186	M	B	7	mem_unknown_0x186
0x0188	M	B	8	mem_unknown_0x188				Copied from 0x1fa4
0x0190	M	B	1	channel_b_current_gate_value			Copied from 0x1fa4+8, 0 when no output
0x0191	M	B	1	mem_unknown_0x191				Copied from 0x1fa4+9
0x0192	M	B	6	mem_unknown_0x192				Copied from 0x1fa4+10
0x0198	M	B	1	channel_b_current_gate_on_time			Copied from 0x1fa4+16
0x0199	M	B	1	channel_b_current_gate_off_time			Copied from 0x1fa4+17
0x019a	M	B	1	channel_b_current_gate_select			Copied from 0x1fa4+18
0x019b	M	B	1	mem_unknown_0x19b				Copied from 0x1fa4+19
0x019c	M	B	1	mem_unknown_0x19c				Copied from 0x1fa4+20, possibly ramp value
0x019d	M	B	1	mem_unknown_0x19d				Copied from 0x1fa4+21
0x019e	M	B	7	mem_unknown_0x19e				Copied from 0x1fa4+22
0x01a5	M	B	1	channel_b_current_intensity_modulation_value
0x01a6	M	B	1	channel_b_current_intensity_modulation_min
0x01a7	M	B	1	channel_b_current_intensity_modulation_max
0x01a8	M	B	1	channel_b_current_intensity_modulation_rate
0x01ac	M	B	1	channel_b_current_intensity_modulation_select
0x01ae	M	B	1	channel_b_current_frequency_modulation_value
0x01af	M	B	1	channel_b_current_frequency_modulation_min
0x01b0	M	B	1	channel_b_current_frequency_modulation_max
0x01b1	M	B	1	channel_b_current_frequency_modulation_rate
0x01b5	M	B	1	channel_b_current_width_modulation_select
0x01b7	M	B	1	channel_b_current_width_modulation_value
0x01b8	M	B	1	channel_b_current_width_modulation_min
0x01b9	M	B	1	channel_b_current_width_modulation_max
0x01ba	M	B	1	channel_b_current_width_modulation_rate
0x01be	M	B	1	channel_b_current_width_modulation_select
0x01d0	M	B	32	space_for_user_routine_scratchpad_b
0x01f0	M	B	1	mem_unknown_0x1f0				Copied from 0x1fdc
0x01f1	M	B	1	counter_for_0x22C				Copied from 0x1fdc+1
0x01f2	M	B	1	counter_for_0x220				Copied from 0x1fdc+2
0x01f3	M	B	1	current_top_mode				Copied from 0x1fdc+3
0x01f4	M	B	1	COMM_POWER_LEVEL				Copied from 0x1fdc+4, aka COMM_LMODE
0x01f5	M	B	1	split_mode_number_a				Copied from 0x1fdc+5
0x01f6	M	B	1	split_mode_number_b				Copied from 0x1fdc+6
0x01f7	M	B	1	favourite_mode					Copied from 0x1fdc+7
0x01f8	M	B	1	advanced_parameter_ramp_level
0x01f9	M	B	1	advanced_parameter_ramp_time
0x01fa	M	B	1	advanced_parameter_depth
0x01fb	M	B	1	advanced_parameter_tempo
0x01fc	M	B	1	advanced_parameter_frequency
0x01fd	M	B	1	advanced_parameter_effect
0x01fe	M	B	1	advanced_parameter_width
0x01ff	M	B	1	advanced_parameter_pace
0x0200	M	B	1	mem_unknown_0x200						Referenced by CallTable_7
0x0201	M	B	1	mem_unknown_0x201
0x0202	M	B	1	mem_unknown_0x202
0x0203	M	B	1	battery_level_percentage
0x0204	M	B	1	mem_unknown_0x204
0x0205	M	B	1	mem_unknown_0x205
0x0206	M	B	1	mem_unknown_0x206
0x0207	M	B	1	mem_unknown_0x207
0x0208	M	B	1	spi_transfer_length
0x0209	M	B	1	mem_unknown_0x209
0x020a	M	B	1	mem_unknown_0x20a
0x020b	M	B	2	OCR1_addition
0x020d	M	B	1	current_multi_adjust_value
0x020e	M	B	1	mem_unknown_0x20e
0x020f	M	B	1	mem_unknown_0x20f
0x0210	M	B	1	mem_unknown_0x210
0x0211	M	B	1	mem_unknown_0x211
0x0212	M	B	1	mem_unknown_0x212
0x0213	M	B	1	cipher_key
0x0214	M	B	1	com_buffer_incrementer
0x0215	M	B	1	power_status_bits
0x021a	M	B	1	mem_unknown_0x21a
0x0220	M	B	12	com_input_buffer
0x022C	M	B	12	com_output_buffer
0x0500	M	B	1	unkown_spdr_value_0
0x0501	M	B	1	unkown_spdr_value_1
0x0503	M	B	1	unkown_spdr_value_3

0x1b0c	P	W	2	FFFF
0x1b10	P	S	4	fla_unknown_0x1b10	
0x1c36	P	W	4	FFFF

0x1c3e	P	B	1	program_lookup_0x1c3e+0
0x1c3f	P	B	1	program_lookup_0x1c3e+1
0x1c40	P	B	1	program_lookup_0x1c3e+2_intenseb
0x1c41	P	B	1	program_lookup_0x1c3e+3_strokeb
0x1c42	P	B	1	program_lookup_0x1c3e+4_strokeb
0x1c43	P	B	1	program_lookup_0x1c3e+5_climba
0x1c44	P	B	1	program_lookup_0x1c3e+6
0x1c45	P	B	1	program_lookup_0x1c3e+7
0x1c46	P	B	1	program_lookup_0x1c3e+8_climbb
0x1c47	P	B	1	program_lookup_0x1c3e+9
0x1c48	P	B	1	program_lookup_0x1c3e+10
0x1c49	P	B	1	program_lookup_0x1c3e+11_wavesa
0x1c4a	P	B	1	program_lookup_0x1c3e+12_wavesb
0x1c4b	P	B	1	program_lookup_0x1c3e+13_comboa
0x1c4c	P	B	1	program_lookup_0x1c3e+14_intensea
0x1c4d	P	B	1	program_lookup_0x1c3e+15_rhythm
0x1c4e	P	B	1	program_lookup_0x1c3e+16
0x1c4f	P	B	1	program_lookup_0x1c3e+17
0x1c50	P	B	1	program_lookup_0x1c3e+18_toggle
0x1c51	P	B	1	program_lookup_0x1c3e+19
0x1c52	P	B	1	program_lookup_0x1c3e+20_phase1a
0x1c53	P	B	1	program_lookup_0x1c3e+21_phase2a
0x1c54	P	B	1	program_lookup_0x1c3e+22_phase3
0x1c55	P	B	1	program_lookup_0x1c3e+23_audio12
0x1c56	P	B	1	program_lookup_0x1c3e+24_orgasm
0x1c57	P	B	1	program_lookup_0x1c3e+25
0x1c58	P	B	1	program_lookup_0x1c3e+26
0x1c59	P	B	1	program_lookup_0x1c3e+27
0x1c5A	P	B	1	program_lookup_0x1c3e+28_tormnt
0x1c5B	P	B	1	program_lookup_0x1c3e+29
0x1c5C	P	B	1	program_lookup_0x1c3e+30
0x1c5D	P	B	1	program_lookup_0x1c3e+31
0x1c5E	P	B	1	program_lookup_0x1c3e+32_random2
0x1c5F	P	B	1	program_lookup_0x1c3e+33_combob
0x1c60	P	B	1	program_lookup_0x1c3e+34_audio3
0x1c61	P	B	1	program_lookup_0x1c3e+35_phase2b
0x1c62	P	B	6	program_lookup_0x1c3e+36
0x1c68	P	W	4	FFFF
0x1c70	P	W	40 	CallTable
0x1cc0	P	W	4	FFFF
0x1cc8	P	6	1	00-Shut Off Power!!
0x1cd8	P	6	1	01-SelfTest OK V1.6
0x1ce8	P	6	1	02-Copyright
0x1cf8	P	6	1	03-Product Name
0x1d08	P	6	1	04-Press any key
0x1d18	P	6	1	05-Selects Mode
0x1d28	P	6	1	06-Press or OK
0x1d38	P	6	1	07-Start Ramp Up
0x1d48	P	6	1	08-Set Split Mode
0x1d58	P	6	1	09-Set As Favorite
0x1d68	P	6	1	0A-Set Pwr Level
0x1d78	P	6	1	0B-Link Slave Unit
0x1d88	P	6	1	0C-Save Settings
0x1d98	P	6	1	0D-Reset Settings
0x1da8	P	6	1	0E-Adjust Advanced
0x1db8	P	6	1	0F-Ramp Mode
0x1dc8	P	6	1	10-Space16
0x1dd8	P	8	1	64-Space8
0x1de0	P	8	1	65-Select
0x1de8	P	8	1	66-CA-Battery
0x1df0	P	8	1	67-CB-Failure
0x1df8	P	8	1	68-CC-Pwr Lev
0x1e00	P	8	1	69-Adjust
0x1e08	P	8	1	6A-Menus
0x1e10	P	8	1	6B-Low
0x1e18	P	8	1	6C-Normal
0x1e20	P	8	1	6D-High
0x1e28	P	8	1	6E-D2-RampLevl
0x1e30	P	8	1	6F-D3-RampTime
0x1e38	P	8	1	70-D4-Depth
0x1e40	P	8	1	71-D5-Tempo
0x1e48	P	8	1	72-D6-Freq
0x1e50	P	8	1	73-D7-Effect
0x1e58	P	8	1	74-D8-Width
0x1e60	P	8	1	75-D9-Pace
0x1e68	P	8	1	76-Waves
0x1e70	P	8	1	77-Stroke
0x1e78	P	8	1	78-Climb
0x1e80	P	8	1	79-Combo
0x1e88	P	8	1	7A-Intense
0x1e90	P	8	1	7B-Rhythm
0x1e98	P	8	1	7C-Audio1
0x1ea0	P	8	1	7D-Audio2
0x1ea8	P	8	1	7E-Audio3
0x1eb0	P	8	1	7F-Split
0x1eb8	P	8	1	80-Random1
0x1ec0	P	8	1	81-Random2
0x1ec8	P	8	1	82-Toggle
0x1ed0	P	8	1	83-Orgasm
0x1ed8	P	8	1	84-Torment
0x1ee0	P	8	1	85-Phase1
0x1ee8	P	8	1	86-Phase2
0x1ef0	P	8	1	87-Phase3
0x1ef8	P	8	1	88-User1
0x1f00	P	8	1	89-User2
0x1f08	P	8	1	8A-User3
0x1f10	P	8	1	8B-User4
0x1f18	P	8	1	8C-User5
0x1f20	P	8	1	8D-User6
0x1f28	P	8	1	8E-User7
0x1f30	P	8	1	F3-SplitA
0x1f38	P	8	1	F4-SplitB
0x1f40	P	8	1	Sel Fav
0x1f48	P	8	1	Ramping
0x1f50	P	8	1	F7-Saved
0x1f58	P	8	1	F8-Linked
0x1f60	P	8	1	Master
0x1f68	P	8	1	Slave
0x1f70	P	8	1	Percent
0x1f78	P	8	1	FC-A B
0x1f80	P	8	1	Ramp
0x1f88	P	8	1	Space8_2
0x1f90	P	8	1	Space8_3
0x1f98	P	W	2	FFFF

0x1f9c	P	B	1	Initial value of x80-$4080
0x1f9d	P	B	1	Initial value of x80-$4081
0x1f9e	P	B	1	Initial value of x80-$4082
0x1f9f	P	B	1	Initial value of x80-$4083
0x1fa0	P	B	1	Initial value of x80-$4084
0x1fa1	P	B	1	Initial value of x80-$4085
0x1fa2	P	B	1	Initial value of x80-$4086
0x1fa3	P	B	1	Initial value of x80-$4087
0x1fa4	P	B	1	Initial value of x80-$4088 routine timer low, x81-$4188 
0x1fa5	P	B	1	Initial value of x80-$4089 routine timer mid, x81-$4189
0x1fa6	P	B	1	Initial value of x80-$408a routine timer high, x81-$418a
0x1fa7	P	B	1	Initial value of x80-$408b routine timer slower, x81-$418b
0x1fa8	P	B	1	Initial value of x80-$408c, x81-$418c
0x1fa9	P	B	1	Initial value of x80-$408d-random-min, x81-$418d
0x1faa	P	B	1	Initial value of x80-$408e-random-max, x81-$418e
0x1fab	P	B	1	Initial value of x80-$408f-unknown, x81-$418f
0x1fac	P	B	1	Initial value of x80-$4090, x81-$4190 current gate select
0x1fad	P	B	1	Initial value of x80-$4091, x81-$4191
0x1fae	P	B	1	Initial value of x80-$4092, x81-$4192
0x1faf	P	B	1	Initial value of x80-$4093, x81-$4193
0x1fb0	P	B	1	Initial value of x80-$4094, x81-$4194
0x1fb1	P	B	1	Initial value of x80-$4095, x81-$4195
0x1fb2	P	B	1	Initial value of x80-$4096, x81-$4196
0x1fb3	P	B	1	Initial value of x80-$4097, x81-$4197
0x1fb4	P	B	1	Initial value of x80-$4098, x81-$4198
0x1fb5	P	B	1	Initial value of x80-$4099, x81-$4199
0x1fb6	P	B	1	Initial value of x80-$409a, x81-$419a
0x1fb7	P	B	1	Initial value of x80-$409b, x81-$419b
0x1fb8	P	B	1	Initial value of x80-$409c, x81-$419c mode switch ramp value counter
0x1fb9	P	B	1	Initial value of x80-$409d, x81-$419d
0x1fba	P	B	1	Initial value of x80-$409e, x81-$419e
0x1fbb	P	B	1	Initial value of x80-$409f, x81-$419f
0x1fbc	P	B	1	Initial value of x80-$40a0, x81-$41a0
0x1fbd	P	B	1	Initial value of x80-$40a1, x81-$41a1
0x1fbe	P	B	1	Initial value of x80-$40a2, x81-$41a2
0x1fbf	P	B	1	Initial value of x80-$40a3, x81-$41a3
0x1fc0	P	B	1	Initial value of x80-$40a4, x81-$41a4
0x1fc1	P	B	1	Initial value of x80-$40a5, x81-$41a5
0x1fc2	P	B	1	Initial value of x80-$40a6, x81-$41a6
0x1fc3	P	B	1	Initial value of x80-$40a7, x81-$41a7
0x1fc4	P	B	1	Initial value of x80-$40a8, x81-$41a8
0x1fc5	P	B	1	Initial value of x80-$40a9, x81-$41a9
0x1fc6	P	B	1	Initial value of x80-$40aa, x81-$41aa
0x1fc7	P	B	1	Initial value of x80-$40ab, x81-$41ab
0x1fc8	P	B	1	Initial value of x80-$40ac, x81-$41ac
0x1fc9	P	B	1	Initial value of x80-$40ad, x81-$41ad
0x1fca	P	B	1	Initial value of x80-$40ae, x81-$41ae
0x1fcb	P	B	1	Initial value of x80-$40af, x81-$41af
0x1fcc	P	B	1	Initial value of x80-$40b0, x81-$41b0
0x1fcd	P	B	1	Initial value of x80-$40b1, x81-$41b1
0x1fce	P	B	1	Initial value of x80-$40b2, x81-$41b2
0x1fcf	P	B	1	Initial value of x80-$40b3, x81-$41b3
0x1fd0	P	B	1	Initial value of x80-$40b4, x81-$41b4
0x1fd1	P	B	1	Initial value of x80-$40b5, x81-$41b5
0x1fd2	P	B	1	Initial value of x80-$40b6, x81-$41b6
0x1fd3	P	B	1	Initial value of x80-$40b7, x81-$41b7
0x1fd4	P	B	1	Initial value of x80-$40b8, x81-$41b8
0x1fd5	P	B	1	Initial value of x80-$40b9, x81-$41b9
0x1fd6	P	B	1	Initial value of x80-$40ba, x81-$41ba
0x1fd7	P	B	1	Initial value of x80-$40bb, x81-$41bb
0x1fd8	P	B	1	Initial value of x80-$40bc, x81-$41bc
0x1fd9	P	B	1	Initial value of x80-$40bd, x81-$41bd
0x1fda	P	B	1	Initial value of x80-$40be, x81-$41be
0x1fdb	P	B	1	Initial value of x80-$40bf, x81-$41bf

0x1fdc	P	B	1	Copied to 0x1f0-$41f0-unknown
0x1fdd	P	B	1	Copied to 0x1f1-$41f1-unknown
0x1fde	P	B	1	Copied to 0x1f2-$41f2-unknown
0x1fdf	P	B	1	Copied to 0x1f3-$41f3-current-top-mode
0x1fe0	P	B	1	Copied to 0x1f4-$41f4-power-level
0x1fe1	P	B	1	Copied to 0x1f5-$41f5-split-mode-a
0x1fe2	P	B	1	Copied to 0x1f6-$41f6-split-mode-b
0x1fe3	P	B	1	Copied to 0x1f7-$41f7-favourite-mode
0x1fe4	P	B	1	Copied to 0x1f8-$41f8-advanced-ramplevel
0x1fe5	P	B	1	Copied to 0x1f9-$41f9-advanced-ramptime
0x1fe6	P	B	1	Copied to 0x1fa-$41fa-advanced-depth
0x1fe7	P	B	1	Copied to 0x1fb-$41fb-advanced-tempo
0x1fe8	P	B	1	Copied to 0x1fc-$41fc-advanced-freq
0x1fe9	P	B	1	Copied to 0x1fd-$41fd-advanced-effect
0x1fea	P	B	1	Copied to 0x1fe-$41fe-advanced-width
0x1feb	P	B	1	Copied to 0x1ff-$41ff-advanced-pace

0x1fec	P	W	5	fla_unknown_0x1fec	ref from 0x3be
0x1ff6	P	B	10	unknown
0x2000	P	B	10	programblock_climbc_blockb
0x200a	P	B	10	programblock_climbc_blockc
0x2014	P	B	14	programblock_strokeb
0x2022	P	B	4	programblock_phase2
0x2026	P	B	6	programblock_wavesb
0x202C	P	B	12	programblock_comboa
0x2038	P	B	6	programblock_combob
0x203e	P	B	4	programblock_intensea
0x2042	P	B	32	programblock_rhythm
0x2062	P	B	14	programblock_rhythm_blockb
0x2070	P	B	22	programblock_toggle
0x2086	P	B	16	programblock_toggle_blockb
0x2096	P	B	12	programblock_phase1a
0x20A2	P	B	4	programblock_phase2a
0x20A6	P	B	16	programblock_phase3
0x20B6	P	B	6	programblock_audio12
0x20Bc	P	B	20	programblock_orgasm
0x20d0	P	B	24	programblock_orgasm_blockb
0x20e8	P	B	12	programblock_orgasm_blockd
0x20f4	P	B	8	unknown
0x20fc	P	B	8	programblock_intenseb
0x2104	P	B	22	programblock_climbc_blockc
0x211A	P	B	40	programblock_climbc_torment
0x2142	P	B	10	programblock_torment_blockb
0x214c	P	B	10	programblock_torment_blockc
0x2156	P	B	10	programblock_torment_blockd
0x2160	P	B	36	programblock_torment_random2
0x2184	P	B	10	programblock_strokeb
0x218E	P	B	8	programblock_audio3
0x2196	P	B	16	programblock_climba
0x21A6	P	B	8	programblock_climba_blockb
0x21AE	P	B	8	programblock_climba_blockc
0x21B6	P	B	18	programblock_climbb
0x21C8	P	W	3717	random_unknown

0x3ff8	P	S	1	authors_initials

0x43a	T	look if we need to run a command (0x70-$4070-execute_command)
0x446	T	look if we need to run a command (0x71-$4071-execute_command-2)
0x45e	T	61Hz (0x73-$4073-master-timer-lsb) time display status screen (A/B knobs etc) then goto Main
0x46c	T	61Hz (0x73-$4073-master-timer-lsb) time run the code at 0x474  (random1 mode stuff)
0x476	T	(0x74-$4074-random1-mode)
0x618	T	(0x74-$4074-random1-mode)
0x47e	T	(0x6A-$406A-master-timer-msb)
0x480	T	(0x75-$4075-random1-time-to-change-mode) did we reach time to change mode?
0x488	T	(0x8D-$408D-random-min)=0x76
0x48c	T	(0x8E-$408E-random-max)=0x7B
0x490	T	(0x74-$4074-random1-mode) is random number between "0x76" and "0x7b"
0x494	T	(0x8D-$408D-random-min)=0x14
0x498	T	(0x8E-$408E-random-max)=0x78
0x4ac	T	0x4184 is random number beween 140 and 184
0x4a0	T	0x4075-random1-time-to-change-mode is (0x406A-master-timer-msb)+number between 20 and 120
0x76	T	(0x67-$4067-Audio Input Level A (Half wave) (ADC7))
0x8a	T	(0x66-$4066-Audio Input Level B (Half wave) (ADC6))
0xa2	T	increment counter (0x73-$4073-master-timer-lsb)
0xaa	T	if we rolled over then increment counter (0x6A-$406A-master-timer-msb)
0xb8	T	This increments the routine timer (3 bytes)
0xbc	T	(0x88-$4088-routine-timer-low)
0xbe	T	(0x89-$4089-routine-timer-mid)
0xc0	T	(0x8A-$408A-routine-timer-high)
0xd6	T	run a timer in 0x8b eight times slower than the routine timer in 0x88/9/a
0xdc	T	(0x8B-$408b-routine-timer-slower)
0xe4	T	(0x96-$4096-unknown)
0xee	T	(0x94-$4094-unknown)
0xf2	T	(0x95-$4095-unknown)
0xfa	T	(0x94-$4094-unknown)
0xfc	T	(0x97-$4097-unknown)
0x104	T	(0x97-$4097-unknown)

0x110	T	0x9a or 0x19a - a or b current gate select [bit0 is A, bit1 is B]
0x116	T	0x90 or 0x190 - a or b current gate value, if it's 1 then look at the off time
0x120	T	0x91 or 0x19a - gate select [bit2-gateoff-use-tempo-parameter] is set? r18 = advanced parameter tempo
0x126	T	0x91 or 0x19a - gate select [bit3-gateoff-use-ma-value] is set? r18 = current_ma_value 
0x11c	T	0x99 or 0x199 - a or b current gate off time
0x132	T	current gate was 0(off), so look at 0x98 or 0x198 - a or b current gate on time
0x134	T	0x91 or 0x19a - gate select [bit5-gateon-use-parameter-effect] is set? r18 = advanced parameter effect
0x13a	T	0x91 or 0x19a - gate select [bit6-gateon-use-ma-value] is set? r18 = current_ma_value
0x144	T	0x9b or 0x19b - gate select
0x150	T	Toggle bit 0 of 0x90 or 0x190 - a or b current gate value (if it was on turn it off, off turn it on)

0x4bc	T	Read hardware 4 buttons, depending on what is pressed do calltable based on r19 (down 0x40) ,r20 (up 0x10),r21 (menu 0x80) ,r22 (ok 0x20)
0xa36	T	Set button actions, menu=show_main_menu, ok=0x1, up=switch_next_mode, down=switch_previous_mode
0x7d6	T	Set button actions, menu=show_main_menu, ok=0x1, up=switch_next_mode, down=switch_previous_mode
0x830	T	Set button actions, up=next_menu_item, down=previous_menu_item, ok=select_menu_item, menu=exit_menu
0x934	T	Set button actions, they run calltable 0 which starts favourite mode
0x9da	T	Set button actions, advanced value down, advanced value up
0x822	T	Call table "show main menu" caused by button press, set min/current menu item to 7, max to 14
0x840	T	Call table "display next menu item" caused by button press, updates 0x078-$4078 between range of 0x79 and 0x7a and displays it on first line of lcd
0x854	T	Call table "previous next menu item" caused by button press, updates 0x078-$4078 between range of 0x79 and 0x7a and displays it on first line of lcd
0x7c0	T	0x79-$4079-lowest-menu-option = 0x76
0x7c6	T	0x80-$4080-highest-menu-option = current_top_mode (0x1f3-$41f3)
0x7cc	T	0x81-$4081-current-menu-option = favourite_mode (0x1f7-$41f7)
0x8aa	T	Set min/current menu item to split_mode_number_a, max menu item to 0x7e, buttons up/down call next_mode, previous_mode
0x898	T	Menu option 7 selected do this (start ramp up)
0x8a4	T	Menu option 8 selected do this (set split mode)
0x8c2	T	Menu option 9 selected do this (set as favourite)
0x8d8	T	Menu option 10 selected do this (set power level)
0x8f8	T	Menu option 11 selected do this (link slave unit) (send 0xe expect a 0x5 set r17[bit7])
0x926	T	Menu option 12 selected do this (save settings)
0x942	T	Menu option 13 selected do this (reset settings)
0x94e	T	Menu option 14 selected do this (show advanced menu)
0x954	T	Set menu min/current to 210, max to 217
0x95e	T	Set button actions, exit_advanced, next_menu_item, previous_menu_item, exit_menu
0x9a8	T	Edit the advanced option chosen in 0x81-$4081-current-menu-option
0x868	T	Switch to Next Mode, run New Mode
0x87e	T	Switch to Previous Mode, run New Mode
0x8dc	T	Set menu min to 6b, max to 6d, current to comm_power-level (0x1f4-$81f4)
0x8ee	T	Set button menu to show_main_menu, ok to set_power_level
0x96a	T	split mode settings menu, set menu min to 0x76, max to 0x7e, current to split_mode_number_b
0x982	T	Set button ok to activate_split_mode, menu to show_main_menu
0x958	T	"Adjust"
0x592	T	display "Battery Low"
0x7d2	T	display "Selects Mode"
0x7e2	T	display "AB" and A&B levels
0x7fc	T	display "Ramp"
0x818	T	display "Selects Mode"
0x82e	T	display "Press or OK"
0x8a6	T	display "SplitA"
0x8da	T	display "Pwr Lev"
0x928	T	display "Saved" "Press any Key"
0x970	T	display "SplitB"
0xa26	T	display "Selects Mode"
0x167a	T	display "Failure", spaces, failure num
0x1688	T	display "Shut off power"
0x17ee	T	display "Copyright"
0x1802	T	display "Product Name"
0x1804	T	display a B at end of product name (if 0x0215[bit0] is set, we have a battery)
0x1814	T	display "SelfTest OK"
0x1824	T	display "Battery" and spaces, battery percent from 0x0203, "%"
0x1838	T	display "Press any key"
0x188c	T	display "Product Name", spaces
0x1894	T	display "Linked"
0x17f8	T	draw the self-test bargraph with a delay between characters
0x16ea	T	our box has a battery
0xb2	T	do this every other time timer0 overflows
0xb4	T	r16[bit2-we-are-slave] is set if we're slave to another box, don't increment the routine timer etc
0x516	T	r16[bit2-we-are-slave] is set if we're slave to another box, in which case all the hardware buttons do nothing
0x606	T	unset r16[bit0-unknown] r16[bit1-unknown] r16[bit4-unknown] r16[bit5-unknown]
0x2c4	T	set r16[bit0-unknown] r16[bit1-unknown] to last 2 bits of r5
0x2f0	T	set r16[bit4-unknown] r16[bit5-unknown] to last 2 bits of r10
0xeac	T	r16[bit0-unknown]
0xecc	T	toggle r16[bit0-unknown] toggle r16[bit1-unknown]
0xee8	T	r16[bit0-unknown]
0xeea	T	unset r16[bit3-unknown]
0xf3c	T	r16[bit7-unknown]
0xf40	T	r16[bit1-unknown]
0xf46	T	set r16[bit3-unknown]
0xf5c	T	r16[bit7-unknown]
0xf60	T	r16[bit0-unknown]
0xfa4	T	r16[bit4-unknown]
0xfc0	T	toggle r16[bit4-unknown], r16[bit5-unknown]
0xfdc	T	r16[bit7-unknown]
0xfde	T	unset r16[bit7-unknown]
0x1028	T	r16[bit3-unknown]
0x102c	T	r16[bit5-unknown]
0x1032	T	set r16[bit7-unknown]
0x1044	T	r16[bit3-unknown]
0x1048	T	r16[bit4-unknown]
0x104e	T	set r16[bit7-unknown]

0xa46	T	menu 0xd2 is "ramp level"
0xa4e	T	menu 0xd4 is "depth"
0xa54	T	menu 0xd6 is "freq"
0xecc	T	toggle r16[bit0] toggle r16[bit1]
0x1880	T	if we got a 0x0e we're a slave box, send back a 0x05 and set r16[bit2-we-are-slave]
0x91e	T	display "Linked" (master)
0x3d8	T	if r17[bit7] is set we're a linked master
0x3d4	T	above is x73-$4073-master-timer-lsb, so run this at 244Hz
0x3dc	T	we're a linked master, so if we got a 06 back from the box, send some more registers
0x3e4	T	$4082-retry-counter.  If we didn't get a 06 back we're meant to retry 4 times then error out
0x3fe	T	write 6 bytes to $4004 (r4-r9) (or if r16[bit6-which-register-set] isn't set, $400a r10-r14)
0x436	T	toggle bit r16[bit6-which-register-set] so next time we send the other register set
0x18fc	T	if we get a 0x_8 0xaa over serial then reset the box
0x2a4	T	line above is 0x91=$4091-unknown-last-bits-123-of-r5
0x2c2	T	0x91=$4091-unknown-last-bits-123-of-r5
0x2cc	T	line above is 0x92=$4092-unknown-last-bits-123-of-r10
0x2ee	T	0x92=$4092-unknown-last-bits-123-of-r10
0x2fa	T	(0x0066-$4066-Audio Input Level A (Half wave) (ADC6))
0x30a	T	0x8F=$408F-unknown
0x358	T	r5 is a copy of [x90] Channel A: Current Gate Value
0x35a	T	r6 is a copy of [x9C] Channel A: Mode Switch Ramp Value Counter
0x35c	T	r7 is a copy of [xA5] Channel A: Current Intensity Modulation Value
0x82	T	r7 is a copy of [xA5] Channel A: Current Intensity Modulation Value
0x35e	T	r8 is min(9,[xAE] Channel A: Current Frequency Modulation Value)
0x368	T	r9 is min(50,[xB7] Channel A: Current Width Modulation Value)
0x374	T	r10 is a copy of [x190] Channel B: Current Gate Value
0x376	T	r11 is a copy of [x19C] Channel B: Mode Switch Ramp Value Counter
0x140a	T	r11 is a copy of [x19C] Channel B: Mode Switch Ramp Value Counter
0x378	T	r12 is a copy of [x1A5] Channel B: Current Intensity Modulation Value
0x96	T	r12 is a copy of [x1A5] Channel B: Current Intensity Modulation Value
0x37a	T	r13 is min(9,[x1AE]) Channel B: Current Frequency Modulation Value
0x384	T	r14 is min(50,[x1B7]) Channel B: Current Width Modulation Value)
0x78c	T	0x6d-$406d-menu-state set to 2 (no menu, program is running)
0x464	T	0x6d-$406d-menu_state in r30, calltable 2 -- display status screen or 1 -- do nothing)
0x1536	T	0x6d-$406d-menu-state set to 1 (in a startup screen or menu)
0x7e6	T	$4064-Level Pot A - CBLOCK_POT_A_OFFSET (ADC4)
0x7ec	T	$4065-Level Pot B - CBLOCK_POT_B_OFFSET (ADC5)
0x7f0	T	$409C-Mode Switch Ramp Value Counter
0x800	T	display r6 (mode switch ramp value counter)
0xeec	T	pin D6 is led A (on)
0xef0	T	pin D5 is led B (on)
0xf0e	T	pin D6 is led A (off)
0xf12	T	pin D5 is led B (off)
0xfe0	T	pin D5 is led B (on)
0xffe	T	pin D5 is led B (off)
0x10e2	T	pin D4 is DAC CS
0x111e	T	pin D4 is DAC CS
0x1498	T	pin D4 is DAC CS
0x1692	T	turns off D
0x2bc	T	look at state of q5,6,7,8 outputs
0x2e8	T	look at state of q5,6,7,8 outputs
0x586	T	look at state of q5,6,7,8 outputs
0xe98	T	q5
0xe9c	T	q5
0xea0	T	q8
0xea6	T	above is q6
0xea8	T	q6
0xeb4	T	q6
0xeb8	T	q6
0xebc	T	q7
0xec2	T	above is q5
0xec4	T	q5
0xf48	T	q6
0xf4c	T	q5
0xf50	T	q8
0xf68	T	q5
0xf6c	T	q6
0xf70	T	q7
0xf94	T	q7
0xf98	T	q7
0xf9e	T	above is q8
0xfa0	T	q8
0xfac	T	q8
0xfb0	T	q8
0xfb6	T	above is q7
0xfb8	T	q7
0x1034	T	q8
0x1038	T	q7
0x1050	T	q7
0x1054	T	q8
0x1440	T	q5=1 q6=1 q8=0 q7=0
0x1446	T	q5=0 q6=0 q8=1 q7=1
0x1456	T	q5,6,7,8=0
0x14aa	T	q5,6,7,8=0
0x14ea	T	set pin b4 high
0x185a	T	above pin B4 isn't used
0x198c	T	pin B4 isn't used
0x1a38	T	pin B4 isn't used
0xb42	T	bug? I think they wanted to use PIND so they get more audio data into the entropy mix?
0xb3c	T	0x72-$4072 last random number
0xb2e	T	gather all the input ADC lowest bits to make something a bit random
0xb64	T	0x8D-0x408D-random-min
0xb66	T	0x8E-0x408E-random-max
0x644	T	0x85-0x4085-unknown (set to r17 bits 1 and bits 0)
0x774	T	0x85-0x4085-unknown (set to r17 bits 1 and bits 0)
0x64c	T	Mode: Waves (blocks 11/12)
0x65e	T	Mode: Stroke (blocks 3/4)
0x670	T	Mode: Climb (blocks 5/8)
0x682	T	Mode: Combo (blocks 13/33)
0x694	T	Mode: Intense (blocks 14/2)
0x6aa	T	Mode: Rhythm (blocks 15)
0x6b4	T	Mode: Audio1 (blocks 23)
0x6ce	T	Mode: Audio2 (blocks 23)
0x6d4	T	Mode: Audio3 (blocks 34)
0x6f2	T	Mode: Random1 (sets 0x74 $4074 random1mode to 1)
0x6fc	T	Mode: Random2 (blocks 32)
0x706	T	Mode: Toggle (blocks 18)
0x710	T	Mode: Orgasm (blocks 24)
0x71a	T	Mode: Torment (blocks 28)
0x728	T	Mode: Phase1/2 (blocks 20/21/35)
0x74a	T	Mode: Phase3 (blocks 22)
0x756	T	Mode: User1-7 read blocks from eprom 0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e (start vector user1-7)
0x47c	T	If 0x74-$4074 is a 1 then we want to start Random1 mode (if it's 0 we're not in Random1 mode)
0x458	T	x84-0x4084-unknown
0xbc4	T	Grab a byte (current program block?) based on current mode (r18:r0) double it, add it to 0x2000 (or 0x2200)
0x1476	L	Label_0x1476         bug? the 1.5 bootloader jumps here
0x4b8	L	Label_0x4b8	     look to see if any buttons are pushed

0x1408	T	r6 is [x9C] Mode Switch Ramp Value Counter
0x15be	T	r6 is [x9C] Mode Switch Ramp Value Counter

0x1126	T	r7 is [xA5] Channel A: Current Intensity Modulation Value
0x1a82	T	r7 is [xA5] Channel A: Current Intensity Modulation Value
0x54a	T	r8 is min(9,[xAE] Channel A: Current Frequency Modulation Value)
0x572	T	r8 is min(9,[xAE] Channel A: Current Frequency Modulation Value)
0x77c	T	r8 is min(9,[xAE] Channel A: Current Frequency Modulation Value)
0x1a80	T	r8 is min(9,[xAE] Channel A: Current Frequency Modulation Value)
0x1ad8	T	r8 is min(9,[xAE] Channel A: Current Frequency Modulation Value)
0x52a	T	above r9 is min(50,[xB7] Channel A: Current Width Modulation Value)
0x5cc	T	r9 is min(50,[xB7] Channel A: Current Width Modulation Value)
0x780	T	r9 is min(50,[xB7] Channel A: Current Width Modulation Value)
0x1a84	T	r9 is min(50,[xB7] Channel A: Current Width Modulation Value)
0x114a	T	r12 is [x1A5] Channel B: Current Intensity Modulation Value
0x1aec	T	r12 is [x1A5] Channel B: Current Intensity Modulation Value
0x5cc	T	r14 is min(50,[x1B7]) Channel B: Current Width Modulation Value)
0x5d8	T	r14 is min(50,[x1B7]) Channel B: Current Width Modulation Value)
0x780	T	r14 is min(50,[x1B7]) Channel B: Current Width Modulation Value)
0x1058	T	above is r14 is min(50,[x1B7]) Channel B: Current Width Modulation Value)
0x1aee	T	r14 is min(50,[x1B7]) Channel B: Current Width Modulation Value)

0x354	T	above line copy r4 from [0x83] Output Control Flags
0x6b4	T	set 0x83=$4083 Output Control Flags all off except bit6-mono-mode (audio1 mode)
0x6e6	T	set 0x83=$4083 Output Control Flags all off except bit2-phase-control-3 (audio3 mode)
0x72c	T	set 0x83=$4083 Output Control Flags all off except bit0-phase-control-0 and bit2-phase-control-2 (phase mode)
0xe5a	T	set 0x83=$4083 Output Control Flags all off except bit2-phase-control-2
0x304	T	0x83=$4083 Output Control Flags - unset bit1-mute
0x6a	T	r4 is copy of [0x83] Output Control Flags - bit0-phase-control-0
0x2f8	T	r4 is copy of [0x83] Output Control Flags - bit1-mute
0x302	T	r4 is copy of [0x83] Output Control Flags - unset bit1-mute
0x4ba	T	r4 is copy of [0x83] Output Control Flags - bit5-disable-frontpanel-switches
0x62e	T	r4 is copy of [0x83] Output Control Flags - unset bit4-unknown-maybe-split
0x634	T	r4 is copy of [0x83] Output Control Flags - set bit4-unknown-maybe-split
0x76a	T	r4 is copy of [0x83] Output Control Flags - bit4-unknown-maybe-split
0x72a	T	r4 is copy of [0x83] Output Control Flags - set all off except bit2-phase-control2, bit0-phase-control0
0xe9e	T	r4 is copy of [0x83] Output Control Flags - bit3-phase-control-3
0xeba	T	r4 is copy of [0x83] Output Control Flags - bit3-phase-control-3
0xeee	T	r4 is copy of [0x83] Output Control Flags - bit3-phase-control-3
0xf10	T	r4 is copy of [0x83] Output Control Flags - bit3-phase-control-3
0xf38	T	r4 is copy of [0x83] Output Control Flags - bit2-phase-control-2
0xf4e	T	r4 is copy of [0x83] Output Control Flags - bit3-phase-control-3
0xf58	T	r4 is copy of [0x83] Output Control Flags - bit2-phase-control-2
0xf6e	T	r4 is copy of [0x83] Output Control Flags - bit3-phase-control-3
0xf8c	T	r4 is copy of [0x83] Output Control Flags - bit3-phase-control-3
0x1024	T	r4 is copy of [0x83] Output Control Flags - bit2-phase-control-2
0x1040	T	r4 is copy of [0x83] Output Control Flags - bit2-phase-control-2
0x10ba	T	r4 is copy of [0x83] bit6-mono-mode.  If we're in audio1 mode, ignore ADC7 and copy ADC6 to ADC7

0x768	T	r26 is 0x7b-$407b-current-mode

0x72	T	is output A in an audio mode (r5[bit6-is-an-audio-mode])? yes then update the intensity_modulation_value
0x88	T	is output B in an audio mode (r10[bit6-is-an-audio-mode])? yes then update the intensity_modulation_value
0x2ac	T	r5 is [x90] Channel A: Current Gate Value (bit3)
0x53a	T	r5 is [x90] Channel A: Current Gate Value (look at bits 0 1 2)
0xe94	T	r5 is [x90] Channel A: Current Gate Value (bit4)
0xeb2	T	r5 is [x90] Channel A: Current Gate Value (bit4)
0xec8	T	r5 is [x90] Channel A: Current Gate Value (bit3)
0xf20	T	r5 is [x90] Channel A: Current Gate Value (bit5) - is set when audio3 mode
0xf22	T	r5 is [x90] Channel A: Current Gate Value (bit7)
0xf36	T	r5 is [x90] Channel A: Current Gate Value (bit0-output-is-gated)
0xf47	T	r5 is [x90] Channel A: Current Gate Value (bit4)
0xf4a	T	r5 is [x90] Channel A: Current Gate Value (bit4)
0xf56	T	r5 is [x90] Channel A: Current Gate Value (bit0-output-is-gated)
0xf66	T	r5 is [x90] Channel A: Current Gate Value (bit4) set r16[bit3-unknown]
0xf6a	T	r5 is [x90] Channel A: Current Gate Value (bit4)
0x18a6	T	r5 is [x90] Channel A: Current Gate Value (0 when no output)

0x10b2	T	0x0f-$400f r15[bit0-disable-pots]
0x1648	T	0x0f-$400f r15[bit0-disable-pots]
0x454	T	0x0f-$400f if r15[bit1-unknown] is set, unset it, and calltable_22 with [0x4084]
0x424	T	write our registers (r4-9 or r10-r14) to the serial port (or 0's if r15[bit2-unknown] isn't set)
0x63e	T	0x0f-$400f unset r15[bit2-unknown] 
0x6a4	T	0x0f-$400f set r15[bit2-unknown] (mode Rhythm, Audio1/2/3)
0x6ec	T	0x0f-$400f unset r15[bit2-unknown]
0x722	T	0x0f-$400f set r15[bit2-unknown] (mode Phase1/2/3, User1-7)
0xd50	T	0x0f-$400f set r15[bit2-unknown]
0x1092	T	0x0f-$400f if r15[bit3-ignore-MA-knob] is set, ignore the MA pot

0xf2a	T	enable int1 (audio A digital input)
0xf26	T	Probably only audio3 mode
0x1012	T	Probably only audio3 mode
0xe68	T	enable int1 (audio A digital input)
0x1016	T	enable int0 (audio B digital input)
0xe7e	T	enable int0 (audio B digital input)
0x168e	T	disable interrupts

0x56	T	Main: reset watchdog, send any serial commands queued, handle any serial received, update MA if needed, handle A&B audio inputs, handle timer0 trigerring, goto Main
0x58	T	is there anything in the com buffer to send? is so go and send it
0x11c4	T	enable RXEN and TXEN in USART control register (no interrupts)

0x11b6	T	set r17[bit5-received-serial-command] 
0x11c2	T	above set r17[bit5-received-serial-command], set r17[bit6]
0x1858	L	handle_received_serial_command
0x1984	T	above unset r17[bit5-received-serial-command]. set r17[bit6]
0x66	T	if r17[bit5-received-serial-command] is set, call handle_received_serial_command()
0x117e	T	Already got a command but it's not been handled yet? ignore input (r17[bit5-received-serial-command])
0x906	T	if we didn't get a command (r17[bit5-received-serial-command] is set), or the command is not "\5" Error 04

0x612	T	set r17[bit0] , set r17[bit1-is-splitmode]
0x624	T	unset r17[bit1-is-splitmode],  set r17[bit0]
0x628	T	r26 is 0x78 $4078 (current displayed menu item)
0x62c	T	menu item mode is not Split
0x766	T	toggle r17[bit0] toggle r17[bit1-is-splitmode]
0x776	T	set r17[bit0], set r17[bit1-is-splitmode]
0x63a	T	unset r17[bit1-is-splitmode]
0x6ba	T	if r17[bit0] is set, 0x4190 (B: current gate value) is set to 0 1 0 0 1 1 1 1 audio1
0x6be	T	if r17[bit1] is set, 0x4090 (A: current gate value) is set to 0 1 0 0 1 1 1 1 audio1
0x6d6	T	if r17[bit0] is set, 0x4090 (A: current gate value) is set to 0 1 1 0 1 1 1 1 audio3
0x762	T	r17[bit1-is-splitmode]

0x5c2	T	toggle r17[bit4-something-to-do-with-MA]
0x77a	T	unset r17[bit4-something-to-do-with-MA]
0x786	T	set r17[bit4-something-to-do-with-MA]
0x5a4	T	r17[bit4-something-to-do-with-MA]

0xef6	T	start an ADC conversion with interrupt, set r17[bit3-adc-running]
0xb20	T	start an ADC conversion with interrupt, set r17[bit3-adc-running]
0xfe6	T	start an ADC conversion with interrupt, set r17[bit3-adc-running]
0x10f0	T	unset r17[bit3-adc-running]
0x582	T	r17[bit3-adc-running]

0x91c	T	set r17[bit7-master-unit]

0xe60	T	sets r17[bit2-timer0-triggered]
0x9c	L	timer0_has_triggered
0x9e	T	above unsets r17[bit2-timer0-triggered]
0x6e	T	if r17[bit2-timer0-triggered] goto timer0_has_triggered
0xa0	T	Set UCSRB to RX-complete-interrupt-enable | RX-enable | TX-enable 

0x1726	T	look for key push 1100 (factory reset up+down)
0x173e	T	our eeprom[byte1] isn't 0x55 or we selected factory reset on boot, look to see if rx and tx are joined, if so do some debug menu
0x174e	T	loop display debug values until we get a keypress 1010
0x17e0	T	key press 1010
0x1766	T	display 0x4063 (Battery Voltage ADC3)
0x1772	T	display 0x4067 (Audio A half wave ADC7)
0x1778	T	display 0x4066 (Audio B half wave ADC6)
0x177e	T	display 0x406b-some-power-offset
0x1784	T	display 0x406c-some-power-offset
0x178c	T	display 0x4061 (Multi Adjust Offset ADC1)
0x1796	T	display OCDR

0x17a2	L	make_a_serial_number	write random bytes to eeprom[2] and eeprom[3] (serial number)
0x17b6	T	clear eeprom with 0 bytes 4-32
0x17c4	T	write a 0x55 to eeprom[1], write 0x1 to eeprom[6] write 0x1 to eeprom[7]

0x146e	T	0x6b-0x406b-some-power-offset
0x15c0	T	0x6b-0x406b-some-power-offset

0x558	T	0x6c-0x406c-some-power-offset
0x1472	T	0x6c-0x406c-some-power-offset
0x15ea	T	0x6c-0x406c-some-power-offset

0x4d8	T	0x68-0x4068-unknown-something-related-to-buttons
0x4e6	T	Grab [0x68-0x4068-unknown-something-related-to-buttons] and clear it

0x15bc	T	0x4064-Level Pot A - CBLOCK_POT_A_OFFSET (ADC4)
0x15d0	T	divide A pot level by power level and add $406b, multiply by ramp value, then same for B pot and $406c, results into 0x205 and 0x206
0x15b8	L	setup_0x205_x206_based_on_pot_and_ramp_and_levels

0x15fe	T	r30 is $4061 Multi Adjust Offset, unless [$4074-random1] says we're in random1 mode,in that case read r30 from ranom byte stored in 0x0184
0x1642	T	r27=$4086-ma-high-end, r26=$4087-ma-low-end
0x1650	L	probably_scale_r2_between_r26_and_r27_result_in_r30
0x15fc	L	setup_ma_value_in_0x20d_from_knob_and_stuff

0xbce	T	r26 was <128, look at r0=1c3e+(r26).  if 0 then 2000 else 2200,  double r0 and add to 2000 or 2200 also r30:31 is 01c3e+r0
0xbe2	T	copy r30:r31 to 0x218, if byte &e0!-0 ... lots of stuff
0xa14	T	$409c-mode-switch-ramp-value-counter
0xa16	T	$419c-mode-switch-ramp-value-counter-copy
0x16ba	T	$4062-adc2-psu-voltage is 0x56 and $4063-adc3-battery-voltage is 0x85 (defaults)
0x16cc	T	run ADC 3 times, look to see what we have in $4063-adc3-battery-voltage, if it's less than 0x8e jump to battery_low display and halt
0x590	L	display_battery_low
0x1686	L	display_shut_off_power_and_halt
0x16de	T	look at $4062-adc2-psu-voltage, if it's greater than 0x92 then error 21, halt (psu voltage too high!)
0x16b8	L	Function_0x16b8_runs_at_startup_checks_battery_checks_reset_displays_msgs					Parameter r28:r29
0x1700	T	above sets power status bits [bit0] if we have a battery, [bit1] is PSU is connected, next figure out battery percentage
0x1406	L	Function_0x1406_runs_at_startup
0x1730	T	look for magic word in eeprom, if eeprom[1]!=0x55 then do factory reset stuff
0x153e	T	$4070-execute_command and $4071-execute_command = 0xff (no commands)
0x14ca	T	Read the OCDR byte from 0x3ff and write it to the register (timing, 8MHz)
0x1ce	T	Set stack to 0x45f
0x14da	T	Set DDRB to 1 0 1 1 1 1 1 1  DDRC to 1 1 1 1 1 1 1 1  DDRD to 1 1 1 1 0 0 1 0
0x14e6	T	set portd[bit4,bit5,bit6]
0x14ee	T	disable the Analog Comparator
0x14f4	T	disable the watchdog timer
0x14fc	T	set SPCR : Enable SPI interrupts, Enable SPI, MSB first, SPI Master mode
0x1502	T	setup timer0 as clk/64, setup timer 1b as clk/8, setup timer2 as external clock on t0 pin (rising edge)
0x151e	T	setup MCUCR (int0 and int1 trigger on rising edge)
0x1524	T	setup serial port frequency (0x19) [8MHz at 19200], control reg: enable RX interrupt, rx and tx enable
0x1530	T	setup timer interrupt mask: ocie1a, ocie1b, toie0 (overflow on timer 0), watchdog to 32k cycles
0x1548	T	finished with the setup, goto main loop

0x12ee	T	if string# < 0x64 then our string is displayed on the left, it's 16 chars long, and the address is 0x1cc8 + 16*string#
0x12f0	T	if string# >= 0x64 and < 0xc8 then our string is displayed on the right, it's 8 characters, at 0x1dd8 + 16*string#
0x12f2	T	if string# >= 0xc8 then string is on the left, it's 8 characters, at 0x1dd8 + 16*(string#-0x64)
